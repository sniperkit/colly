// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scrape.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The request message containing the user's name.
type ScrapeRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Domain   string `protobuf:"bytes,3,opt,name=domain" json:"domain,omitempty"`
	Filter   string `protobuf:"bytes,4,opt,name=filter" json:"filter,omitempty"`
	Seq      string `protobuf:"bytes,5,opt,name=seq" json:"seq,omitempty"`
	Status   int32  `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
	Mid      string `protobuf:"bytes,7,opt,name=mid" json:"mid,omitempty"`
	Attempts int32  `protobuf:"varint,8,opt,name=attempts" json:"attempts,omitempty"`
	Sched    string `protobuf:"bytes,9,opt,name=sched" json:"sched,omitempty"`
	Size     int64  `protobuf:"varint,10,opt,name=size" json:"size,omitempty"`
}

func (m *ScrapeRequest) Reset()                    { *m = ScrapeRequest{} }
func (m *ScrapeRequest) String() string            { return proto1.CompactTextString(m) }
func (*ScrapeRequest) ProtoMessage()               {}
func (*ScrapeRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ScrapeRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ScrapeRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ScrapeRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ScrapeRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ScrapeRequest) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ScrapeRequest) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ScrapeRequest) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

func (m *ScrapeRequest) GetAttempts() int32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *ScrapeRequest) GetSched() string {
	if m != nil {
		return m.Sched
	}
	return ""
}

func (m *ScrapeRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

// The response message containing the greetings
type ScrapeReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ScrapeReply) Reset()                    { *m = ScrapeReply{} }
func (m *ScrapeReply) String() string            { return proto1.CompactTextString(m) }
func (*ScrapeReply) ProtoMessage()               {}
func (*ScrapeReply) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ScrapeReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*ScrapeRequest)(nil), "proto.ScrapeRequest")
	proto1.RegisterType((*ScrapeReply)(nil), "proto.ScrapeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Scraper service

type ScraperClient interface {
	// Sends a greeting
	Scrape(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (*ScrapeReply, error)
}

type scraperClient struct {
	cc *grpc.ClientConn
}

func NewScraperClient(cc *grpc.ClientConn) ScraperClient {
	return &scraperClient{cc}
}

func (c *scraperClient) Scrape(ctx context.Context, in *ScrapeRequest, opts ...grpc.CallOption) (*ScrapeReply, error) {
	out := new(ScrapeReply)
	err := grpc.Invoke(ctx, "/proto.Scraper/Scrape", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Scraper service

type ScraperServer interface {
	// Sends a greeting
	Scrape(context.Context, *ScrapeRequest) (*ScrapeReply, error)
}

func RegisterScraperServer(s *grpc.Server, srv ScraperServer) {
	s.RegisterService(&_Scraper_serviceDesc, srv)
}

func _Scraper_Scrape_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScrapeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScraperServer).Scrape(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Scraper/Scrape",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScraperServer).Scrape(ctx, req.(*ScrapeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Scraper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Scraper",
	HandlerType: (*ScraperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scrape",
			Handler:    _Scraper_Scrape_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scrape.proto",
}

func init() { proto1.RegisterFile("scrape.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4e, 0xeb, 0x30,
	0x10, 0x40, 0xbf, 0xdb, 0x26, 0x69, 0xe7, 0x03, 0x42, 0xa3, 0x0a, 0xac, 0xae, 0xa2, 0x6c, 0xc8,
	0x2a, 0x0b, 0x60, 0x8f, 0xd4, 0x13, 0x54, 0xe1, 0x04, 0x6e, 0xec, 0x82, 0xa5, 0x98, 0x38, 0x1e,
	0x67, 0x51, 0xae, 0xcb, 0x45, 0x90, 0xed, 0x14, 0x09, 0x56, 0x99, 0xf7, 0xf4, 0x64, 0x65, 0x06,
	0xae, 0xa8, 0x73, 0xc2, 0xaa, 0xc6, 0xba, 0xc1, 0x0f, 0x98, 0xc5, 0x4f, 0xf5, 0xc5, 0xe0, 0xfa,
	0x35, 0xfa, 0x56, 0x8d, 0x93, 0x22, 0x8f, 0x37, 0xb0, 0xd0, 0x92, 0xb3, 0x92, 0xd5, 0x9b, 0x76,
	0xa1, 0x25, 0xde, 0xc2, 0x72, 0x72, 0x3d, 0x5f, 0x44, 0x11, 0x46, 0xbc, 0x83, 0x5c, 0x0e, 0x46,
	0xe8, 0x0f, 0xbe, 0x8c, 0x72, 0xa6, 0xe0, 0x4f, 0xba, 0xf7, 0xca, 0xf1, 0x55, 0xf2, 0x89, 0xc2,
	0x0b, 0xa4, 0x46, 0x9e, 0xa5, 0x17, 0x48, 0x8d, 0xa1, 0x24, 0x2f, 0xfc, 0x44, 0x3c, 0x2f, 0x59,
	0x9d, 0xb5, 0x33, 0x85, 0xd2, 0x68, 0xc9, 0x8b, 0x54, 0x1a, 0x2d, 0x71, 0x07, 0x6b, 0xe1, 0xbd,
	0x32, 0xd6, 0x13, 0x5f, 0xc7, 0xf6, 0x87, 0x71, 0x0b, 0x19, 0x75, 0xef, 0x4a, 0xf2, 0x4d, 0xec,
	0x13, 0x20, 0xc2, 0x8a, 0xf4, 0xa7, 0xe2, 0x50, 0xb2, 0x7a, 0xd9, 0xc6, 0xb9, 0x7a, 0x80, 0xff,
	0x97, 0x25, 0x6d, 0x7f, 0x46, 0x0e, 0x85, 0x51, 0x44, 0xe2, 0x4d, 0xcd, 0x7b, 0x5e, 0xf0, 0xf1,
	0x05, 0x8a, 0x14, 0x3a, 0x7c, 0x86, 0x3c, 0x8d, 0xb8, 0x4d, 0x27, 0x6b, 0x7e, 0xdd, 0x69, 0x87,
	0x7f, 0xac, 0xed, 0xcf, 0xd5, 0xbf, 0x7d, 0x0d, 0xf7, 0xdd, 0x60, 0x1a, 0x3a, 0x59, 0x37, 0xc8,
	0xa9, 0xf3, 0xbd, 0x38, 0x52, 0x0a, 0xf7, 0xf3, 0x2f, 0x1c, 0x02, 0x1c, 0xd8, 0x31, 0x8f, 0xf6,
	0xe9, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x1e, 0xf8, 0x9c, 0x3c, 0x97, 0x01, 0x00, 0x00,
}
